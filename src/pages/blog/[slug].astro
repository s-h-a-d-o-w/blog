---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getPosts } from "../../utils/getPosts.astro";
import { parseDescription } from "../../utils/parseDescription";

export async function getStaticPaths() {
  return (await getPosts()).map((post) => {
    const slug = post.file.split("/").pop()?.split(".").shift();
    return {
      params: { slug },
      props: { post, slug },
    };
  });
}

const { Content, frontmatter, compiledContent } = Astro.props.post;
const { title, publishDate, lastUpdated } = frontmatter;
const description = parseDescription(await compiledContent());
const slug = Astro.props.slug;
const permalink = `${Astro.site?.href}${slug}`;
---

<BaseLayout
  title={title}
  description={description}
  permalink={permalink}
  isArticle
  slug={slug}
  publishDate={publishDate}
  lastUpdated={lastUpdated}
>
  <header>
    <p>{new Date(publishDate).toLocaleDateString()}
    {
      lastUpdated && (
        <>
          <br />
          Last updated: {new Date(lastUpdated).toLocaleDateString()}
        </>
      )
    }
    </p>
    <h1>{title}</h1>
    <hr />
  </header>
  <div class="article-container">
    <article class="content">
      <Content />
    </article>
    <div class="giscus"></div>
  </div>
</BaseLayout>

<script
  is:inline
  src="https://giscus.app/client.js"
  data-repo="s-h-a-d-o-w/blog"
  data-repo-id="R_kgDOM41aeA"
  data-category="Announcements"
  data-category-id="DIC_kwDOM41aeM4CjA6p"
  data-mapping="title"
  data-strict="1"
  data-reactions-enabled="1"
  data-emit-metadata="0"
  data-input-position="top"
  data-theme="light"
  data-lang="en"
  crossorigin="anonymous"
  async
></script>

<script>
  // https://fonts.google.com/icons?selected=Material+Symbols+Outlined:content_copy:FILL@0;wght@400;GRAD@0;opsz@24&icon.query=copy&icon.size=24&icon.color=%235f6368
  let copyButtonIcon = `<svg xmlns="http://www.w3.org/2000/svg" height="1.25rem" viewBox="0 -960 960 960" width="1.25rem" fill="currentColor"><path d="M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-560h80v560h440v80H200Zm160-240v-480 480Z"/></svg>`;

  for (let preBlock of Array.from(document.querySelectorAll("pre"))) {
    // Wrapper is necessary so that copy button doesn't move when scrolling
    let wrapper = document.createElement("div");
    wrapper.style.position = "relative";
    preBlock.parentNode?.insertBefore(wrapper, preBlock);
    wrapper.appendChild(preBlock);

    let copyButton = document.createElement("button");
    copyButton.className = "copy-code";
    copyButton.innerHTML = copyButtonIcon;
    copyButton.setAttribute("aria-label", "Copy code");
    copyButton.addEventListener("click", async () => {
      await copyCode(preBlock, copyButton);
    });

    wrapper.appendChild(copyButton);
  }

  async function copyCode(preBlock: HTMLPreElement, button: HTMLButtonElement) {
    let code = preBlock.querySelector("code");
    let text = code?.innerText;
    if (!text) {
        return;
    }

    await navigator.clipboard.writeText(text);

    // visual feedback that task is completed
    // https://fonts.google.com/icons?selected=Material+Symbols+Outlined:check:FILL@0;wght@400;GRAD@0;opsz@24&icon.query=check&icon.size=24&icon.color=%235f6368
    button.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" height="1.25rem" viewBox="0 -960 960 960" width="1.25rem" fill="currentColor"><path d="M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"/></svg>`;

    setTimeout(() => {
      button.innerHTML = copyButtonIcon;
    }, 700);
  }
</script>

<style>
  header {
    text-align: center;
    max-width: 50rem;
    margin-top: 1rem;
  }

  header h1 {
    margin-bottom: 0.7em;
  }

  header p {
    color: var(--text-secondary);
    text-transform: uppercase;
    font-family: var(--font-family-sans);
    font-weight: 600;
  }

  header hr {
    min-width: 100px;
    width: 30%;
  }

  .giscus {
    margin-top: 3rem;
  }
</style>
