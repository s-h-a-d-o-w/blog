---
import { ViewTransitions } from 'astro:transitions'
import '../styles/fonts.css'
import '../styles/global.scss'

export interface Props {
  title: string
  description: string
  permalink: string

  isArticle?: boolean
  slug?: string
  publishDate?: string
  lastUpdated?: string
}

const { title, description, permalink, isArticle, slug, publishDate, lastUpdated } = Astro.props
const ogImageUrl = (slug && Astro.site?.href ? `${Astro.site.href}og/posts/${slug}.png` : undefined) as string | undefined
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width" />
<link rel="icon" type="image/x-icon" href="/favicon.ico" />
<link rel="sitemap" href="/sitemap-index.xml">

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={isArticle ? "article" : "website"} />
<meta property="og:url" content={permalink} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
{isArticle && <>
    {publishDate && <meta property="article:published_time" content={publishDate} />}
    {lastUpdated && <meta property="article:modified_time" content={lastUpdated} />}
    <meta property="article:author" content="https://aop.software" />
    <meta property="article:section" content="Technology" />
</>}
{ogImageUrl && (
  <>
    <meta property="og:image" content={ogImageUrl} />
    <meta property="og:image:width" content="1200"/>
    <meta property="og:image:height" content="630"/>
  </>
)}

<ViewTransitions />

<!-- This is intentionally inlined to avoid FOUC -->
<script is:inline>
  const root = document.documentElement
  const theme = localStorage.getItem('theme')
  if (
    theme === 'dark' ||
    (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)
  ) {
    root.classList.add('theme-dark')
  } else {
    root.classList.remove('theme-dark')
  }
</script>
